// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: internal/infrastructure/grpc/deliveryServ/delivery_service.proto

package deliverygrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeliveryServiceGRPCClient is the client API for DeliveryServiceGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliveryServiceGRPCClient interface {
	CalculateShippingCost(ctx context.Context, in *GetShippingCostRequest, opts ...grpc.CallOption) (*GetShippingCostResponse, error)
}

type deliveryServiceGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryServiceGRPCClient(cc grpc.ClientConnInterface) DeliveryServiceGRPCClient {
	return &deliveryServiceGRPCClient{cc}
}

func (c *deliveryServiceGRPCClient) CalculateShippingCost(ctx context.Context, in *GetShippingCostRequest, opts ...grpc.CallOption) (*GetShippingCostResponse, error) {
	out := new(GetShippingCostResponse)
	err := c.cc.Invoke(ctx, "/DeliveryServiceGRPC/CalculateShippingCost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveryServiceGRPCServer is the server API for DeliveryServiceGRPC service.
// All implementations must embed UnimplementedDeliveryServiceGRPCServer
// for forward compatibility
type DeliveryServiceGRPCServer interface {
	CalculateShippingCost(context.Context, *GetShippingCostRequest) (*GetShippingCostResponse, error)
	mustEmbedUnimplementedDeliveryServiceGRPCServer()
}

// UnimplementedDeliveryServiceGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedDeliveryServiceGRPCServer struct {
}

func (UnimplementedDeliveryServiceGRPCServer) CalculateShippingCost(context.Context, *GetShippingCostRequest) (*GetShippingCostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateShippingCost not implemented")
}
func (UnimplementedDeliveryServiceGRPCServer) mustEmbedUnimplementedDeliveryServiceGRPCServer() {}

// UnsafeDeliveryServiceGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryServiceGRPCServer will
// result in compilation errors.
type UnsafeDeliveryServiceGRPCServer interface {
	mustEmbedUnimplementedDeliveryServiceGRPCServer()
}

func RegisterDeliveryServiceGRPCServer(s grpc.ServiceRegistrar, srv DeliveryServiceGRPCServer) {
	s.RegisterService(&DeliveryServiceGRPC_ServiceDesc, srv)
}

func _DeliveryServiceGRPC_CalculateShippingCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShippingCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceGRPCServer).CalculateShippingCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeliveryServiceGRPC/CalculateShippingCost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceGRPCServer).CalculateShippingCost(ctx, req.(*GetShippingCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeliveryServiceGRPC_ServiceDesc is the grpc.ServiceDesc for DeliveryServiceGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeliveryServiceGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DeliveryServiceGRPC",
	HandlerType: (*DeliveryServiceGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateShippingCost",
			Handler:    _DeliveryServiceGRPC_CalculateShippingCost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/infrastructure/grpc/deliveryServ/delivery_service.proto",
}
