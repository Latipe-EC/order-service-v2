// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/ansrivas/fiberprometheus/v2"
	"github.com/bytedance/sonic"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/adaptor"
	"github.com/gofiber/fiber/v2/middleware/basicauth"
	healthcheck2 "github.com/gofiber/fiber/v2/middleware/healthcheck"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/fiber/v2/middleware/monitor"
	"github.com/hellofresh/health-go/v5"
	"latipe-order-service-v2/config"
	order2 "latipe-order-service-v2/internal/api/order"
	"latipe-order-service-v2/internal/common/errors"
	"latipe-order-service-v2/internal/infrastructure/adapter/authserv"
	"latipe-order-service-v2/internal/infrastructure/adapter/deliveryserv"
	"latipe-order-service-v2/internal/infrastructure/adapter/storeserv"
	"latipe-order-service-v2/internal/infrastructure/grpc/deliveryServ"
	"latipe-order-service-v2/internal/infrastructure/grpc/productServ"
	"latipe-order-service-v2/internal/infrastructure/grpc/promotionServ"
	"latipe-order-service-v2/internal/infrastructure/grpc/userServ"
	"latipe-order-service-v2/internal/infrastructure/persistence/commission"
	"latipe-order-service-v2/internal/infrastructure/persistence/db"
	"latipe-order-service-v2/internal/infrastructure/persistence/order"
	"latipe-order-service-v2/internal/middleware"
	"latipe-order-service-v2/internal/middleware/auth"
	"latipe-order-service-v2/internal/publisher"
	"latipe-order-service-v2/internal/router"
	"latipe-order-service-v2/internal/services/commands/orderCmd"
	"latipe-order-service-v2/internal/services/queries/orderQuery"
	"latipe-order-service-v2/internal/services/queries/statisticQuery"
	"latipe-order-service-v2/internal/subscriber"
	"latipe-order-service-v2/pkg/cache"
	"latipe-order-service-v2/pkg/healthcheck"
	"latipe-order-service-v2/pkg/rabbitclient"
)

// Injectors from server.go:

func New() (*Server, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	cacheEngine, err := cache.NewCacheEngineV8(configConfig)
	if err != nil {
		return nil, err
	}
	gorm := db.NewMySQLConnection(configConfig, cacheEngine)
	orderRepository := order.NewGormRepository(gorm)
	commissionRepository := commission.NewCommissionRepository(gorm)
	cacheV9CacheEngine, err := cache.NewCacheEngineV9(configConfig)
	if err != nil {
		return nil, err
	}
	connection := rabbitclient.NewRabbitClientConnection(configConfig)
	publisherTransactionMessage := publisher.NewTransactionProducer(configConfig, connection)
	voucherServiceClient := vouchergrpc.NewVoucherClientGrpcImpl(configConfig)
	productServiceClient := productgrpc.NewProductGrpcClientImpl(configConfig)
	deliveryServiceClient := deliverygrpc.NewDeliveryServiceGRPCClientImpl(configConfig)
	userServiceClient := usergrpc.NewUserServiceClientGRPCImpl(configConfig)
	service := storeserv.NewStoreServiceAdapter(configConfig)
	orderCommandUsecase := orderCmd.NewOrderCommmandService(configConfig, orderRepository, commissionRepository, cacheV9CacheEngine, publisherTransactionMessage, voucherServiceClient, productServiceClient, deliveryServiceClient, userServiceClient, service)
	orderQueryUsecase := orderQuery.NewOrderQueryService(orderRepository)
	orderApiHandler := order2.NewOrderHandler(orderCommandUsecase, orderQueryUsecase)
	orderStatisticUsecase := statisticQuery.NewOrderStatisicService(orderRepository)
	orderStatisticApiHandler := order2.NewStatisticHandler(orderStatisticUsecase)
	authservService := authserv.NewAuthServHttpAdapter(configConfig)
	deliveryservService := deliveryserv.NewDeliServHttpAdapter(configConfig)
	authenticationMiddleware := auth.NewAuthMiddleware(authservService, service, deliveryservService, configConfig, cacheV9CacheEngine)
	middlewareMiddleware := middleware.NewMiddleware(authenticationMiddleware)
	orderRouter := router.NewOrderRouter(orderApiHandler, orderStatisticApiHandler, middlewareMiddleware)
	purchaseReplySubscriber := subscriber.NewPurchaseReplySubscriber(configConfig, connection, orderCommandUsecase)
	server := NewServer(configConfig, orderRouter, purchaseReplySubscriber)
	return server, nil
}

// server.go:

type Server struct {
	app       *fiber.App
	cfg       *config.Config
	orderSubs *subscriber.PurchaseReplySubscriber
}

func NewServer(
	cfg *config.Config,
	orderRouter router.OrderRouter,
	orderSubs *subscriber.PurchaseReplySubscriber) *Server {

	app := fiber.New(fiber.Config{
		ReadTimeout:  cfg.Server.ReadTimeout,
		WriteTimeout: cfg.Server.WriteTimeout,
		JSONDecoder:  sonic.Unmarshal,
		JSONEncoder:  sonic.Marshal,
		ErrorHandler: errors.CustomErrorHandler,
	})

	basicAuthConfig := basicauth.Config{
		Users: map[string]string{
			cfg.Metrics.Username: cfg.Metrics.Password,
		},
	}

	h, _ := healthcheck.NewHealthCheckService(cfg)
	app.Get("/status", basicauth.New(basicAuthConfig), adaptor.HTTPHandlerFunc(h.HandlerFunc))
	app.Use(healthcheck2.New())
	app.Use(healthcheck2.New(healthcheck2.Config{
		LivenessProbe: func(c *fiber.Ctx) bool {
			return true
		},
		LivenessEndpoint: "/live",
		ReadinessProbe: func(c *fiber.Ctx) bool {
			result := h.Measure(c.Context())
			return result.Status == health.StatusOK
		},
		ReadinessEndpoint: "/ready",
	}))

	app.Get(cfg.Metrics.FiberURL, basicauth.New(basicAuthConfig), monitor.New(monitor.Config{Title: "Orders Services Metrics Page (Fiber)"}))

	prometheus := fiberprometheus.New("latipe-order-service-v2")
	prometheus.RegisterAt(app, cfg.Metrics.PrometheusURL, basicauth.New(basicAuthConfig))
	app.Use(prometheus.Middleware)

	app.Use(logger.New())

	app.Get("", func(ctx *fiber.Ctx) error {
		s := struct {
			Message string `json:"message"`
			Version string `json:"version"`
		}{
			Message: "the orders service was developed by tdat.it",
			Version: "v2.0.0",
		}
		return ctx.JSON(s)
	})

	api := app.Group("/api")
	v2 := api.Group("/v2")

	orderRouter.Init(&v2)

	return &Server{
		cfg:       cfg,
		app:       app,
		orderSubs: orderSubs,
	}
}

func (serv Server) App() *fiber.App {
	return serv.app
}

func (serv Server) Config() *config.Config {
	return serv.cfg
}

func (serv Server) OrderTransactionSubscriber() *subscriber.PurchaseReplySubscriber {
	return serv.orderSubs
}
